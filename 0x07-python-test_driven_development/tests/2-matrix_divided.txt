
===============================
How to use 2-matrix_divided.py
===============================

This module defines a matrix division function ``matrix_divided(matrix, div)``.

Usage
======

The function ``matrix_divided(matrix, div)`` returns a new matrix that
contains the result of the division of the matrix rounded to 2 decimal place

::

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix = [[3, 6, 9],[12, 15, 18]]
    >>> print(matrix_divided(matrix, 3))
    [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

returns a new matrix

::

    >>> print(matrix)
    [[3, 6, 9], [12, 15, 18]]

The function can also handle floating-point numbers.

::

    >>> matrix = [ [1,2.0,3], [4.456,5,6] ]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, 0.67, 1.0], [1.49, 1.67, 2.0]]

Integers and floats can be combined.

::

    >>> matrix = [ [1, -2.2, 3, 4.4, 5], [-6.6, 7.00, 8, 9.999, 10] ]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, -0.73, 1.0, 1.47, 1.67], [-2.2, 2.33, 2.67, 3.33, 3.33]]

Dividing with floating point number

::

    >>> print(matrix_divided(matrix, 3.56))
    [[0.28, -0.62, 0.84, 1.24, 1.4], [-1.85, 1.97, 2.25, 2.81, 2.81]]


EXCEPTIONS
===========

Elements of the matrix must be of integer/float types

::

    >>> matrix = "not a list"
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    	raise TypeError("matrix must be a matrix (list of lists) of "
    TypeError: matrix must be a matrix (list of lists) of integers/floats

::

    >>> matrix = [ [1,"kelvin",3], [4,5,6] ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    	raise TypeError("matrix must be a matrix (list of lists) of "
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Note that an empty list will raise the TypeError.

::

    >>> matrix = []
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    	raise TypeError("matrix must be a matrix (list of lists) of "
    TypeError: matrix must be a matrix (list of lists) of integers/floats

But an empty list of lists will succeed.

::

    >>> matrix = [[]]
    >>> print(matrix_divided(matrix, 3))
    [[]]

An identical TypeError is raised if ``matrix`` is not specifically a list of
lists.

::

    >>> matrix = [1, 2, 3]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    	raise TypeError("matrix must be a matrix (list of lists) of "
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Each row of the matrix must be of the same size

::

    >>> matrix = [[1, 2.0, 3, 4], [4.456, 5, 6]]
    >>> print(matrix_divided(matrix, 3.56))
    Traceback (most recent call last):
    	raise TypeError("Each row of the matrix must have the same size")
    TypeError: Each row of the matrix must have the same size

Div must be of int/float type

::

    >>> matrix = [[1, 2.0, 3], [4.456, 5, 6]]
    >>> print(matrix_divided(matrix, "3"))
    Traceback (most recent call last):
    	raise TypeError("div must be a number")
    TypeError: div must be a number

Div can't be equal to zero

::

    >>> print(matrix_divided(matrix, 0))
    Traceback (most recent call last):
    	raise ZeroDivisionError("division by zero")
    ZeroDivisionError: division by zero
